package com.example.mockdemo.app;

import static org.hamcrest.CoreMatchers.either;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;

import org.jbehave.core.annotations.Given;
import org.jbehave.core.annotations.Then;
import org.jbehave.core.annotations.When;
import org.junit.Before;
import org.junit.Test;

import com.example.mockdemo.messenger.ConnectionStatus;
import com.example.mockdemo.messenger.MalformedRecipientException;
import com.example.mockdemo.messenger.MessageService;
import com.example.mockdemo.messenger.MessageServiceSimpleImpl;
import com.example.mockdemo.messenger.SendingStatus;

public class MessengerSteps {
	private static final String VALID_SERVER = "inf.ug.edu.pl";
	private static final String INVALID_SERVER = "inf.ug.edu.eu";

	private static final String VALID_MESSAGE = "some message";
	private static final String INVALID_MESSAGE = "ab";

	private Messenger messenger;
	private MessageService ms;
	
	@Given("a messenger")
	public void messengerSetup() throws MalformedRecipientException{
		ms = new MessageServiceSimpleImpl();
		messenger = new Messenger(ms);
		
	}
	
	@When("server connection succeed")
	public void checkValidConnection(){
		assertEquals(0, messenger.testConnection(VALID_SERVER));
	}
	
	@Then("sending valid message should return $result")
	public void sendingValidMessage(int result){
		assertThat(messenger.sendMessage(VALID_SERVER, VALID_MESSAGE),
				either(equalTo(0)).or(equalTo(1)));
	}
	
	@Then("sending invalid message should return $result")
	public void sendingInvalidMessage(int result){
		assertThat(messenger.sendMessage(VALID_SERVER, INVALID_MESSAGE),
				either(equalTo(2)).or(equalTo(-1)));
	}
	
	@When("server connection failed")
	public void checkInvalidConnection(){
		assertEquals(1, messenger.testConnection(INVALID_SERVER));
	}
	
	@Then("sending valid message should return $result")
	public void checkValidMessage1(int result){
		assertThat(messenger.sendMessage(INVALID_SERVER, INVALID_MESSAGE),
				either(equalTo(2)).or(equalTo(-1)));
	}
	
	@Then("sending invalid message should return $result")
	public void checkInvalidMessage1(int result){
		assertThat(messenger.sendMessage(INVALID_SERVER, INVALID_MESSAGE),
				either(equalTo(2)).or(equalTo(-1)));
	}
}
